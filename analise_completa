import streamlit as st
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt

# Inicia a p√°gina com um estado de navega√ß√£o
if "page" not in st.session_state:
    st.session_state.page = "inicial"

# Controle de navega√ß√£o baseado em session_state
if st.session_state.page == "inicial":
    # Aqui vai a l√≥gica da p√°gina inicial (o que voc√™ j√° tem para capturar dados, calcular os scores, etc.)
    st.title("Triagem ESG e Financeira - Avalia√ß√£o da Empresa")

    # C√≥digo de entrada de dados...

    # Bot√£o para avan√ßar para a pr√≥xima p√°gina
    if st.button("Avan√ßar para an√°lise completa"):
        st.session_state.page = "an√°lise_completa"  # Altera a p√°gina para "an√°lise_completa"
        # Sem necessidade de rerun, pois a altera√ß√£o no session_state j√° causar√° a troca de p√°gina automaticamente
        st.experimental_rerun()  # For√ßa a atualiza√ß√£o da p√°gina

elif st.session_state.page == "an√°lise_completa":
    # Definindo configura√ß√µes da p√°gina
    st.set_page_config(page_title="An√°lise Completa", page_icon="üìà")
    
    # Simula√ß√£o de dados de entrada (substitua pelos reais)
    nome_empresa = "Empresa Exemplo"
    respostas_binarias = [1, 1, 0, 1, 1]
    respostas_esg = [60, 70, 80, 65, 75, 85, 90, 60]
    respostas_financeiros = [50, 60, 55, 70, 65, 60, 80, 75, 70]
    respostas = (respostas_binarias, respostas_esg, respostas_financeiros)
    
    # Avalia√ß√£o (voc√™ deve importar a fun√ß√£o correta do m√≥dulo usado)
    from avaliador import avaliar_empresa
    df_resultados, total, score_esg, score_fin = avaliar_empresa(nome_empresa, respostas)
    
    # Radar
    plotar_radar(df_resultados, nome_empresa)
    
    # Estimativa de melhoria
    plotar_impacto_melhoria_esg(score_esg, score_fin, nome_empresa)
    
    # Impacto de pr√°ticas ESG
    plotar_impacto_praticas_esg()
    
    # Proje√ß√£o de EBITDA
    plotar_projecao_ebitda()
    
    # Retorno a√ß√µes ESG x n√£o ESG
    plotar_comparativo_acoes()

# ------------------------------
# Fun√ß√µes auxiliares para gr√°ficos
# ------------------------------

def plotar_radar(df_resultados, nome_empresa):
    categorias = df_resultados['Indicador']
    valores = df_resultados['Score']
    categorias = list(categorias)
    valores = list(valores)
    valores += valores[:1]  # fechar o gr√°fico

    angles = np.linspace(0, 2 * np.pi, len(categorias), endpoint=False).tolist()
    angles += angles[:1]

    fig, ax = plt.subplots(figsize=(8, 8), subplot_kw=dict(polar=True))
    ax.fill(angles, valores, color='red', alpha=0.25)
    ax.plot(angles, valores, color='red', linewidth=2)
    ax.set_yticklabels([])
    ax.set_xticks(angles[:-1])
    ax.set_xticklabels(categorias, fontsize=9)
    ax.set_title(f"Radar de Indicadores - {nome_empresa}", size=14, weight='bold')
    st.pyplot(fig)


def plotar_impacto_melhoria_esg(score_esg, score_fin, nome_empresa):
    melhoria_esg = np.arange(0, 21, 5)
    melhoria_fin = [score_fin + (x * 0.4) for x in melhoria_esg]

    fig, ax = plt.subplots(figsize=(10, 5))
    ax.plot(score_esg + melhoria_esg, melhoria_fin, marker='o', color='green')
    ax.axvline(x=score_esg, color='red', linestyle='--', label='ESG Atual')
    ax.axhline(y=score_fin, color='blue', linestyle='--', label='Financeiro Atual')

    for x, y in zip(score_esg + melhoria_esg, melhoria_fin):
        ax.text(x, y + 0.5, f"{y:.1f}", ha='center', fontsize=8)

    ax.set_title(f'Melhoria Financeira com ESG - {nome_empresa}', fontsize=14)
    ax.set_xlabel('Score ESG')
    ax.set_ylabel('Score Financeiro')
    ax.grid(True, linestyle='--', alpha=0.7)
    ax.legend()
    st.pyplot(fig)


def plotar_impacto_praticas_esg():
    praticas = [
        "Energia Renov√°vel", "Diversidade na Lideran√ßa",
        "√âtica na Cadeia", "Satisfa√ß√£o Interna", "Redu√ß√£o de Carbono"
    ]
    impacto_ebitda = [3, 3, 4, 6, 2]
    impacto_receita = [0, 2, 0, 5, 1]

    x = np.arange(len(praticas))
    fig, ax = plt.subplots(figsize=(10, 5))
    ax.bar(x, impacto_ebitda, width=0.4, label='EBITDA')
    ax.bar(x + 0.4, impacto_receita, width=0.4, label='Receita')
    ax.set_xticks(x + 0.2)
    ax.set_xticklabels(praticas, rotation=45, ha='right')
    ax.set_ylabel('Impacto (%)')
    ax.set_title('Impacto das Pr√°ticas ESG')
    ax.legend()
    st.pyplot(fig)


def plotar_projecao_ebitda():
    anos = [2025, 2026, 2027, 2028, 2029]
    ebitda_atual = [100, 102, 104, 106, 108]
    ebitda_esg = [100, 105, 110, 115, 120]

    fig, ax = plt.subplots(figsize=(10, 5))
    ax.plot(anos, ebitda_atual, marker='o', label='Sem ESG')
    ax.plot(anos, ebitda_esg, marker='o', label='Com ESG')
    ax.set_xlabel('Ano')
    ax.set_ylabel('EBITDA (R$ mi)')
    ax.set_title('Proje√ß√£o do EBITDA')
    ax.grid(True)
    ax.legend()
    st.pyplot(fig)


def plotar_comparativo_acoes():
    anos = np.arange(2018, 2023)
    retorno_esg = np.array([0.15, 0.20, 0.18, 0.10, 0.12])
    retorno_nao_esg = np.array([-0.25, 0.05, -0.10, -0.03, 0.02])
    retorno_ise = np.array([0.12, 0.15, 0.10, 0.08, 0.11])
    dy_esg, dy_nao_esg, dy_ise = 0.04, 0.02, 0.035

    valor_esg = [100]
    valor_nao_esg = [100]
    valor_ise = [100]

    for r1, r2, r3 in zip(retorno_esg, retorno_nao_esg, retorno_ise):
        valor_esg.append(valor_esg[-1] * (1 + r1 + dy_esg))
        valor_nao_esg.append(valor_nao_esg[-1] * (1 + r2 + dy_nao_esg))
        valor_ise.append(valor_ise[-1] * (1 + r3 + dy_ise))

    valor_esg = valor_esg[1:]
    valor_nao_esg = valor_nao_esg[1:]
    valor_ise = valor_ise[1:]

    fig, ax = plt.subplots(figsize=(12, 6))
    ax.plot(anos, valor_esg, marker='o', label='Empresas ESG', color='green')
    ax.plot(anos, valor_nao_esg, marker='s', label='Sem ESG', color='red')
    ax.plot(anos, valor_ise, marker='^', label='ISE B3', color='blue')
    ax.set_title('Evolu√ß√£o do Valor das A√ß√µes (2018‚Äì2022)')
    ax.set_xlabel('Ano')
    ax.set_ylabel('Valor da A√ß√£o (R$)')
    ax.grid(True)
    ax.legend()
    st.pyplot(fig)
