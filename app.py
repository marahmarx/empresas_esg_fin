import streamlit as st
import numpy as np

lista_indicadores = [
    {"indicador": "Pol√≠tica Ambiental Formalizada (1 ou 0)", "peso": 1.92, "categoria": "ESG", "faixas": [(1, 1, 100), (0, 0, 50)]},
    {"indicador": "Relat√≥rios de Sustentabilidade Auditados", "peso": 1.92, "categoria": "ESG", "faixas": [(1, 1, 100), (0, 0, 50)]},
    {"indicador": "Pr√°ticas Anticorrup√ß√£o", "peso": 1.92, "categoria": "ESG", "faixas": [(1, 1, 100), (0, 0, 40)]},
    {"indicador": "Comit√™ ESG Existente", "peso": 1.92, "categoria": "ESG", "faixas": [(1, 1, 100), (0, 0, 50)]},
    {"indicador": "Transpar√™ncia Financeira", "peso": 1.92, "categoria": "ESG", "faixas": [(1, 1, 100), (0, 0, 40)]},
    {"indicador": "Emiss√£o de CO2 (M ton)", "peso": 5.77, "categoria": "ESG", "faixas": [(0, 1000, 100), (1000.01, 5000, 70), (5000.01, np.inf, 40)]},
    {"indicador": "Gest√£o de Res√≠duos (%)", "peso": 5.77, "categoria": "ESG", "faixas": [(90, 100, 100), (70, 89.99, 70), (0, 69.99, 40)]},
    {"indicador": "Efici√™ncia energ√©tica (%)", "peso": 5.77, "categoria": "ESG", "faixas": [(80, 100, 100), (50, 79.99, 70), (0, 49.99, 40)]},
    {"indicador": "Diversidade e Inclus√£o Mulheres (%)", "peso": 5.77, "categoria": "ESG", "faixas": [(50, 100, 100), (30, 49.99, 70), (0, 29.99, 40)]},
    {"indicador": "Diversidade e Inclus√£o Pessoas Negras (%)", "peso": 5.77, "categoria": "ESG", "faixas": [(50, 100, 100), (30, 49.99, 70), (0, 29.99, 40)]},
    {"indicador": "√çndice de Satisfa√ß√£o dos Funcion√°rios (%)", "peso": 1.92,"categoria": "ESG", "faixas": [(80, 100, 100), (50, 79.99, 70), (0, 49.99, 40)]},
    {"indicador": "Investimento em Programas Sociais (R$ M)", "peso": 5.77,"categoria": "ESG", "faixas": [(1, np.inf, 100), (0, 0, 50)]},
    {"indicador": "Risco Ambiental - exist√™ncia de riscos (0 a 10)", "peso": 3.85, "categoria": "ESG", "faixas": [(0, 0, 100), (1, 1, 50)]},
    {"indicador": "Varia√ß√£o da a√ß√£o YoY (%)", "peso": 7.89, "categoria": "Financeiro", "faixas": [(-np.inf, 0, 0), (0.01, 10, 40), (10.01, 20, 70), (20.01, np.inf, 100)]},
    {"indicador": "EBITDA (R$ Bi)", "peso": 7.89, "categoria": "Financeiro", "faixas": [(-np.inf, 0, 0), (0, 29.99, 40), (30, 49.99, 70), (50, np.inf, 100)]},
    {"indicador": "EBITDA YoY (%)", "peso": 5.26, "categoria": "Financeiro", "faixas": [(-np.inf, 0, 0), (0, 9.99, 40), (10, 14.99, 70), (15, np.inf, 100)]},
    {"indicador": "Margem EBITDA (%)", "peso": 2.63, "categoria": "Financeiro", "faixas": [(-np.inf, 0, 0), (0, 9.99, 40), (10, 19.99, 70), (20, np.inf, 100)]},
    {"indicador": "Posi√ß√£o no MERCO", "peso": 5.26, "categoria": "Financeiro", "faixas": [(1, 30, 100), (31, 60, 70), (61, 100, 40), (101, np.inf, 0)]},
    {"indicador": "Participa√ß√£o em √çndices ESG (quantidade)", "peso": 5.26, "categoria": "Financeiro", "faixas": [(0, 0, 40), (1, 1, 70), (2, np.inf, 100)]},
    {"indicador": "Lucro L√≠quido (R$ Bi)", "peso": 7.89, "categoria": "Financeiro", "faixas": [(-np.inf, 0, 0), (0, 9.99, 40), (10, 19.99, 70), (20, np.inf, 100)]},
    {"indicador": "Lucro L√≠quido YoY (%)", "peso": 5.26, "categoria": "Financeiro", "faixas": [(-np.inf, 0, 0), (0, 29.99, 40), (30, 49.99, 70), (50, np.inf, 100)]},
    {"indicador": "Margem L√≠quida (%)", "peso": 2.63, "categoria": "Financeiro", "faixas": [(-np.inf, 0, 0), (0, 9.99, 40), (10, 19.99, 70), (20, np.inf, 100)]},
]


# Perguntas divididas por etapas
questions_etapa1 = [
    " Qual o segmento de atua√ß√£o da empresa?",
    " Qual o setor de atua√ß√£o da empresa? (Prim√°rio, Secund√°rio ou Terci√°rio)",
    "1. A empresa possui uma pol√≠tica ambiental formalizada? (1=Sim, 0=N√£o)",
    "2. A empresa possui relat√≥rios de sustentabilidade auditados? (1=Sim, 0=N√£o)",
    "3. A empresa possui Pr√°ticas Anticorrup√ß√£o? (1=Sim, 0=N√£o)",
    "4. A empresa possui Comit√™ ESG Existente? (1=Sim, 0=N√£o)",
    "5. A empresa possui Transpar√™ncia Financeira? (1=Sim, 0=N√£o)"
]

questions_etapa2 = [
    "6. Qual √© a emiss√£o de carbono (CO2) da empresa em toneladas por ano?",
    "7. Qual o percentual de res√≠duos reciclados ou reutilizados pela empresa?",
    "8. Qual o percentual de efici√™ncia energ√©tica (uso de energia renov√°vel ou economia)?",
    "9. Qual o percentual de diversidade de mulheres entre os funcion√°rios?",
    "10. Qual o percentual de diversidade de negros entre os funcion√°rios?",
    "11. Qual o √≠ndice de satisfa√ß√£o dos funcion√°rios (0 a 100)?",
    "12. Qual o valor de investimento em programas sociais (R$ M)?",
    "13. Qual o Risco Ambiental do setor? exist√™ncia de riscos (0 a 10)"
]

questions_etapa3 = [
    "14. Qual a varia√ß√£o da a√ß√£o da empresa na B3 (% YoY)?",
    "15. Qual foi o EBITDA da empresa em 2024 (R$ Bi)?",
    "16. Qual o EBITDA YoY (%)?",
    "17. Qual a margem EBITDA YoY (%)?",
    "18. Qual a posi√ß√£o da empresa no ranking MERCO (digite 0 se n√£o estiver listada)?",
    "19. Quantas participa√ß√µes a empresa tem em √≠ndices ESG brasileiros (ISE B3, DJSI etc.)?",
    "20. Qual foi o lucro l√≠quido de 2024 (R$ Bi)?",
    "22. Qual foi o lucro l√≠quido  YOY (%)?",
    "23. Qual a margem de lucro l√≠quida (%)?"
]

# Fun√ß√µes de pontua√ß√£o

def calcular_score(valores, indicadores):
    nota = 0
    peso_total = 0
    for valor, indicador in zip(valores, indicadores):
        pontuacao = 0
        for faixa in indicador["faixas"]:
            minimo, maximo, nota_faixa = faixa
            if minimo <= valor <= maximo:
                pontuacao = nota_faixa
                break
        peso = indicador["peso"]
        nota += pontuacao * peso
        peso_total += peso
    return round(nota / peso_total, 2)

def etapa_1_basica(respostas):
    eliminacoes = sum([1 for r in respostas if r == 0])
    return eliminacoes < 3

def calcular_score_esg(valores):
    indicadores_esg = [i for i in lista_indicadores if i["categoria"] == "ESG"]
    return calcular_score(valores, indicadores_esg)

def calcular_score_financeiro(valores):
    indicadores_fin = [i for i in lista_indicadores if i["categoria"] == "Financeiro"]
    return calcular_score(valores, indicadores_fin)


# Streamlit
st.set_page_config(page_title="Avalia√ß√£o ESG + Financeira", layout="centered")
st.title("üìä Avalia√ß√£o ESG + Financeira")

def etapa1():
    st.title("Etapa 1 - Informa√ß√µes B√°sicas")

    # Entrada de nome da empresa
    nome_empresa = st.text_input("Nome da Empresa")

    # Campos sem peso (informativos)
    segmento = st.text_input("Qual o segmento de atua√ß√£o da empresa?")
    setor = st.selectbox("Qual o setor de atua√ß√£o da empresa? (Prim√°rio, Secund√°rio ou Terci√°rio)",
                         ["Prim√°rio", "Secund√°rio", "Terci√°rio"])

    # Perguntas com peso (indicadores bin√°rios ESG)
    perguntas_binarias = [
        "A empresa possui pol√≠ticas de sustentabilidade?",
        "A empresa possui pol√≠ticas de diversidade?",
        "A empresa realiza auditorias ambientais?",
        "A empresa publica relat√≥rios ESG?",
        "A empresa est√° em conformidade com legisla√ß√µes ambientais?"
    ]

    respostas_binarias = []
    for i, pergunta in enumerate(perguntas_binarias):
        resposta = st.radio(pergunta, ["Sim", "N√£o"], key=f"pergunta_{i}")
        respostas_binarias.append(1 if resposta == "Sim" else 0)

    # Bot√£o para avan√ßar
    if st.button("Avan√ßar para Etapa 2"):
        if not nome_empresa:
            st.warning("Por favor, preencha o nome da empresa antes de continuar.")
        else:
            # Armazenamento no session_state
            st.session_state["etapa1_concluida"] = True
            st.session_state["nome_empresa"] = nome_empresa
            st.session_state["segmento"] = segmento
            st.session_state["setor"] = setor
            st.session_state["respostas_binarias"] = respostas_binarias
            st.switch_page("etapa2.py")  # Substitua se o nome real for diferente

        st.header("Etapa 2 - Indicadores ESG")
        etapa2_resp = [st.number_input(q, min_value=0.0, format="%.2f") for q in questions_etapa2]

        score_esg = calcular_score_esg(etapa2_resp)
        st.metric("Score ESG", score_esg)

        if score_esg > 50:
            st.success("Empresa APROVADA para a Etapa 3")

            st.header("Etapa 3 - Indicadores Financeiros")
            etapa3_resp = [st.number_input(q, min_value=0.0, format="%.2f") for q in questions_etapa3]

            score_fin = calcular_score_financeiro(etapa3_resp)
            st.metric("Score Financeiro", score_fin)

            if score_fin > 60:
                st.success(f"‚úÖ {nome} foi APROVADA na Avalia√ß√£o Final!")
            else:
                st.error(f"‚ùå {nome} foi REPROVADA na Etapa Financeira.")
        else:
            st.error(f"‚ùå {nome} foi REPROVADA na Etapa ESG.")
    else:
        st.error(f"‚ùå {nome} foi ELIMINADA na Triagem B√°sica.")
